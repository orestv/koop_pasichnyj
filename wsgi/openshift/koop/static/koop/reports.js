// Generated by CoffeeScript 1.4.0
(function() {
  var NODETYPE_FOLDER, NODETYPE_REPORT, document_loaded, enable_tabs, folder_create_before_submit, folder_create_name_changed, folder_create_success, folder_node_selected, init_folder_create_form, init_upload_form, node_selected, report_node_selected, set_upload_progress_percentage, setup_tree, upload_before_submit, upload_progress, upload_success;

  NODETYPE_FOLDER = 'folder';

  NODETYPE_REPORT = 'report';

  document_loaded = function() {
    $('#folderFormsContainer').hide();
    $('#reportFormsContainer').hide();
    $('#uploadProgressOuter').hide();
    $(".modal").on('shown.bs.modal', function() {
      $(this).find("[autofocus]:first").focus();
      return folder_create_name_changed();
    });
    enable_tabs();
    init_upload_form();
    init_folder_create_form();
    return setup_tree();
  };

  init_folder_create_form = function() {
    $('#folderCreateForm').ajaxForm({
      beforeSubmit: folder_create_before_submit,
      success: folder_create_success
    });
    $('#folderCreateForm').clearForm();
    $('#btnFolderCreateForm_Submit').click(function() {
      return $('#folderCreateForm').submit();
    });
    return $('#folderCreateForm input[name="name"]').on('input', folder_create_name_changed);
  };

  folder_create_name_changed = function() {
    var val;
    val = $('#folderCreateForm input[name="name"]').val();
    if (val) {
      return $('#btnFolderCreateForm_Submit').removeAttr('disabled');
    } else {
      return $('#btnFolderCreateForm_Submit').attr('disabled', 'disabled');
    }
  };

  folder_create_before_submit = function() {
    return console.log('Before submit!');
  };

  folder_create_success = function() {
    console.log('Submit success!');
    $('#modalCreateFolder').modal('hide');
    $('#folderCreateForm').resetForm();
    return $('#reportsTree').jstree('refresh');
  };

  init_upload_form = function() {
    return $('#fileUploadForm').ajaxForm({
      beforeSubmit: upload_before_submit,
      resetForm: true,
      error: function() {
        return alert('An error has occurred!');
      },
      success: upload_success,
      uploadProgress: upload_progress
    });
  };

  upload_before_submit = function() {
    $('#fileUploadForm input[type="submit"]').button('loading');
    set_upload_progress_percentage(0);
    return $('#uploadProgressOuter').show();
  };

  upload_success = function(responseText, statusText, xhr, form) {
    $('#fileUploadForm input[type="submit"]').button('reset');
    $('#uploadProgressOuter').hide();
    $('#uploadSuccessAlert').show();
    setTimeout((function() {
      return $('#uploadSuccessAlert').fadeOut();
    }), 1500);
    return $('#reportsTree').jstree('refresh');
  };

  upload_progress = function(event, position, total, percentComplete) {
    console.log(percentComplete);
    return set_upload_progress_percentage(percentComplete);
  };

  set_upload_progress_percentage = function(percentage) {
    $('#uploadProgressInner').css('width', "" + percentage + "%");
    return $('#uploadProgressInner').html("" + percentage + "%");
  };

  enable_tabs = function() {};

  node_selected = function(e, data) {
    if (data.node.type === NODETYPE_FOLDER) {
      return folder_node_selected(data.node);
    } else if (data.node.type === NODETYPE_REPORT) {
      return report_node_selected(data.node);
    }
  };

  report_node_selected = function(reportNode) {
    $('#folderFormsContainer').hide();
    $('#reportFormsContainer').show();
    return $('#folderButtonsFieldset').attr('disabled', 'disabled');
  };

  folder_node_selected = function(folderNode) {
    $('#reportFormsContainer').hide();
    $('#folderFormsContainer').show();
    $('#folderCreateForm input[name="parent"]').val(folderNode.id);
    $('#fileUploadFolderId').val(folderNode.id);
    return $('#folderButtonsFieldset').removeAttr('disabled');
  };

  setup_tree = function() {
    var treeContainer;
    treeContainer = $('#reportsTree');
    $(treeContainer).jstree({
      core: {
        themes: {
          variant: 'large'
        },
        data: {
          url: '/api/tree'
        },
        multiple: false
      },
      types: {
        folder: {
          icon: 'glyphicon glyphicon-folder-open',
          valid_children: [NODETYPE_FOLDER, NODETYPE_REPORT]
        },
        report: {
          icon: 'glyphicon glyphicon-file',
          valid_children: []
        }
      },
      plugins: ['wholerow', 'state', 'types']
    });
    return $(treeContainer).on('select_node.jstree', node_selected);
  };

  $(document).ready(document_loaded);

}).call(this);
